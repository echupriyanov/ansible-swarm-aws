        - name: Provision a set of instances
          ec2:
            key_name: '{{cbt_cloud.key_name}}'
            region: '{{cbt_cloud.region}}'
            zone: '{{cbt_cloud.region}}{{zone_id}}'
            group:
              - ssh-only
              - vpc-full
              # - msk-office-allow-all
              # - msk-office-lan
            instance_type: '{{instance_type}}'
            image: "{{ docker_base_ami }}"
            instance_profile_name: '{{instance_profile}}'
            wait: true
            exact_count: 1
            count_tag:
              Name: '{{instance_name}}{{zone_id}}'
            instance_tags:
              Name: '{{instance_name}}{{zone_id}}'
              Role: '{{instance_role}}'
            volumes:
              - device_name: /dev/sda1
                volume_size: '{{root_size}}'
                volume_type: gp2
                delete_on_termination: true
          register: ec2

        - debug: var=ec2

        - name: create individual internal DNS records
          route53:
            command: create
            private_zone: yes
            overwrite: yes
            zone: cybertonica.aws
            record: '{{instance_name}}{{zone_id}}.{{cbt_cloud.domain}}'
            type: A
            ttl: 60
            value: '{{ec2.tagged_instances[0].private_ip}}'

        - name: create individual external DNS records
          route53:
            command: create
            private_zone: no
            overwrite: yes
            zone: cybertonica.aws
            record: '{{instance_name}}{{zone_id}}.{{cbt_cloud.domain}}'
            type: A
            ttl: 60
            value: '{{ec2.tagged_instances[0].public_ip}}'

        - name: Add new instance to host group
          add_host:
            hostname: '{{ ec2.tagged_instances[0].public_ip }}'
            groupname: launched
            sysname: '{{instance_name}}{{zone_id}}'
            private_ip: '{{ ec2.tagged_instances[0].private_ip }}'
            public_ip: '{{ ec2.tagged_instances[0].public_ip }}'

        - name: Wait for SSH to come up
          wait_for: host={{ ec2.tagged_instances[0].public_dns_name }} port=22 timeout=320 state=started
