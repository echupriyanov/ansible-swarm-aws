---
  - hosts: localhost
    connection: local
    gather_facts: False
    vars_files:
      - /Users/eric/Work/secuber/aws/docker-base/vars/amis.yml
      - vars/etcd-create.yml
    vars:
      ssh_key: tchu
      basename: etcd
      instance_type: t2.nano
      count: 3

    tasks:
    - name: Provision an instances
      ec2:
        key_name: "{{ssh_key}}"
        # assign_public_ip: yes
        region: eu-west-1
        zone: eu-west-1a
        group:
          - ssh-only
          - vpc-full
        # vpc_subnet_id: "{{subnet_id}}"
        # group_id: sg-e6355882
        instance_type: '{{instance_type}}'
        instance_profile_name: ec2-linux-role
        image: "{{ docker_base_ami }}"
        wait: true
        exact_count: '{{count}}'
        count_tag:
          Name: '{{basename}}'
        instance_tags:
          Name: '{{basename}}'
          Role: '{{basename}}-cluster'
      register: ec2

    - debug: var=ec2

    - name: Add new instance to host group
      add_host: hostname={{ item.public_ip }} groupname=launched
      with_items: ec2.tagged_instances
    - name: Wait for SSH to come up
      wait_for: host={{ item.public_ip }} port=22 timeout=320 state=started
      with_items: ec2.tagged_instances

    - name: create individual internal DNS records
      route53:
        command: create
        private_zone: yes
        overwrite: yes
        zone: cybertonica.aws
        record: '{{basename}}-0{{item.0+1}}.cybertonica.aws'
        type: A
        ttl: 7200
        value: '{{item.1.private_ip}}'
      with_indexed_items: ec2.tagged_instances

    - name: create individual external DNS records
      route53:
        command: create
        private_zone: no
        overwrite: yes
        zone: cybertonica.aws
        record: '{{basename}}-0{{item.0+1}}.cybertonica.aws'
        type: A
        ttl: 7200
        value: '{{item.1.public_ip}}'
      with_indexed_items: ec2.tagged_instances

    - debug: msg='{{ec2.tagged_instances|map(attribute="public_ip")|list}}'

    - name: create external DNS record
      route53:
        command: create
        private_zone: no
        overwrite: yes
        zone: cybertonica.aws
        record: '{{basename}}.cybertonica.aws'
        type: A
        ttl: 7200
        value: '{{ec2.tagged_instances|map(attribute="public_ip")|list}}'

    - debug: msg='{{ec2.tagged_instances|map(attribute="private_ip")|list}}'

    - name: create internal DNS record
      route53:
        command: create
        private_zone: yes
        overwrite: yes
        zone: cybertonica.aws
        record: '{{basename}}.cybertonica.aws'
        type: A
        ttl: 7200
        value: '{{ec2.tagged_instances|map(attribute="private_ip")|list}}'

  - hosts: launched
    remote_user: ubuntu
    become_user: root
    become: yes
    gather_facts: yes
    vars_files:
      - vars/etcd-create.yml
    vars:
      base_pkgs:
        - linux-image-extra-virtual
        - language-pack-ru
        - python-pip
    tasks:
      - name: set hostname
        hostname: name='{{basename}}-0{{groups["launched"].index(inventory_hostname)+1}}.cybertonica.aws'

      - name: update system
        apt: update_cache=yes upgrade=yes

      - name: install base packages
        apt: pkg={{item}} state=present update_cache=yes
        with_items: '{{base_pkgs}}'

      - name: install AWS cli
        pip: name=awscli state=present

      - name: restart nodes
        shell: sleep 2 && shutdown -r now "Ansible updates triggered"
        async: 1
        poll: 0
        ignore_errors: true

      - name: waiting for server to come back
        local_action: wait_for host="{{ inventory_hostname }}" port=22 state=started delay=5
        become: false
