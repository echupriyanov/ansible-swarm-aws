---
  - hosts: localhost
    connection: local
    gather_facts: False
    vars_files:
      - /Users/eric/Work/secuber/aws/docker-base/vars/amis.yml
    vars:
      instance_count: 1
      instance_type: t2.large
      basename: gitlab
      role: utils
      root_size: 8

    tasks:
      - name: Provision a set of instances
        ec2:
          key_name: tchu
          region: eu-west-1
          zone: eu-west-1b
          group:
            - ssh-only
            - vpc-full
            # - msk-office-allow-all
            # - msk-office-lan
          instance_type: '{{instance_type}}'
          image: "{{ docker_base_ami }}"
          instance_profile_name: ec2-linux-role
          wait: true
          exact_count: '{{instance_count}}'
          count_tag:
            Role: '{{role}}'
          instance_tags:
            Name: '{{basename}}'
            Role: '{{role}}'
          volumes:
            - device_name: /dev/sda1
              volume_size: '{{root_size}}'
              volume_type: gp2
              delete_on_termination: true
        register: ec2

      - name: tag instances
        ec2_tag:
          region: eu-west-1
          resource: '{{item.1["id"]}}'
          tags:
            Name: '{{basename}}'
        with_indexed_items: ec2.tagged_instances

      - name: create individual internal DNS records
        route53:
          command: create
          private_zone: yes
          overwrite: yes
          zone: cybertonica.aws
          record: '{{basename}}.cybertonica.aws'
          type: A
          ttl: 7200
          value: '{{item.1.private_ip}}'
        with_indexed_items: ec2.tagged_instances

      - name: create individual external DNS records
        route53:
          command: create
          private_zone: no
          overwrite: yes
          zone: cybertonica.aws
          record: '{{basename}}.cybertonica.aws'
          type: A
          ttl: 7200
          value: '{{item.1.public_ip}}'
        with_indexed_items: ec2.tagged_instances

      - debug: msg='{{ec2.tagged_instances|map(attribute="public_ip")|list}}'

      # - name: create external DNS record
      #   route53:
      #     command: create
      #     private_zone: no
      #     overwrite: yes
      #     zone: cybertonica.aws
      #     record: 'flocker.cybertonica.aws'
      #     type: A
      #     ttl: 7200
      #     value: '{{ec2.tagged_instances|map(attribute="public_ip")|list}}'
      #
      # - debug: msg='{{ec2.tagged_instances|map(attribute="private_ip")|list}}'
      #
      # - name: create internal DNS record
      #   route53:
      #     command: create
      #     private_zone: yes
      #     overwrite: yes
      #     zone: cybertonica.aws
      #     record: 'consul.cybertonica.aws'
      #     type: A
      #     ttl: 7200
      #     value: '{{ec2.tagged_instances|map(attribute="private_ip")|list}}'
      #
      - name: Add new instance to host group
        add_host: hostname={{ item.public_ip }} groupname=launched
        with_items: ec2.tagged_instances
      - name: Wait for SSH to come up
        wait_for: host={{ item.public_dns_name }} port=22 timeout=320 state=started
        with_items: ec2.tagged_instances

  - name: Configure instance(s)
    hosts: launched
    remote_user: ubuntu
    become: True
    gather_facts: True
    vars:
      basename: gitlab
    tasks:
      - name: set hostname
        hostname: name='{{basename}}-0{{groups["launched"].index(inventory_hostname)+1}}.cybertonica.aws'

      - name: update system
        apt: update_cache=yes upgrade=dist

      - name: update kernel
        apt: pkg=linux-image-extra-virtual-lts-wily state=present

      - name: reset docker host id
        file: dest=/etc/docker/key.json state=absent

      - name: install AWS CLI
        pip: name=awscli state=present

      - name: get docker creds for CBT registry
        shell: $(aws ecr get-login --region=us-east-1)

      - name: install cronjob to update docker creds for registry
        cron: name="update docker creds" minute="11" job="$(/usr/local/bin/aws ecr get-login --region=us-east-1)" state=present

      - name: restart machine
        command: shutdown -r now "Ansible updates triggered"
        async: 0
        poll: 0
        ignore_errors: true

      - name: waiting for server to come back
        local_action: wait_for host="{{ inventory_hostname }}" port=22 state=started
        become: false
